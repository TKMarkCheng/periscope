rule all:
    input:
        # # merged fastq file
        # expand("{output_prefix}.fastq",output_prefix=config.get("output_prefix")),
        # all bam file
        expand("{output_prefix}.bam",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}.bam.bai",output_prefix=config.get("output_prefix")),
        # counts of read types
        expand("{output_prefix}_periscope_counts.csv",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}_periscope_novel_counts.csv",output_prefix=config.get("output_prefix")),
        # amplicon list
        expand("{output_prefix}_periscope_amplicons.csv",output_prefix=config.get("output_prefix")),
        # tagged bam
        # expand("{output_prefix}_periscope.bam",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}_header.txt",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}.split.00.sam",output_prefix=config.get("output_prefix"))
        # expand("{output_prefix}_periscope.bam.bai",output_prefix=config.get("output_prefix"))


if config["technology"] == "illumina":

    rule align:
        input:
            fastq = config.get("fastq")
        output:
           expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
        params:
            reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
            threads = config.get("mapping_threads")
        shell:
            "bwa mem -Y -t {params.threads} {params.reference} {input.fastq} | samtools sort - | samtools view -bh - > {output}"

elif config["technology"] == "ont":
    rule make_multi_ref:
        output:
            'multi_ref.faa' 
        params:
            reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
            fastq_dir = config.get("gff_file"),
            search = expand("{scripts_dir}/create_multi_reference.py",scripts_dir=config.get("scripts_dir")),

        shell:
            "python {params.search} --fasta {params.reference} --gff {params.fastq_dir}"

    if config.get('fastq_dir'):
        if config.get('gzipped') == True:
            # collect fastqs
            rule collect_fastqs:
                output:
                    expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension"))
                params:
                    fastq_dir = config.get("fastq_dir"),
                    extension = config.get("extension")
                shell:
                    "zcat {params.fastq_dir}/*.{params.extension} > {output}"
        else:
            # collect fastqs
            rule collect_fastqs:
                output:
                    expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension"))
                params:
                    fastq_dir = config.get("fastq_dir"),
                    extension = config.get("extension")
                shell:
                    "cat {params.fastq_dir}/*.{params.extension} > {output}"


        # map fastqs
        if config['tool']=='minimap':
            rule align:
                input:
                    merged_fastq = expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension")),
                    reference='multi_ref.faa'
                output:
                    expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
                params:
                    reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                    threads = config.get("mapping_threads"),
                    para=config.get('para')
                shell:
                    "minimap2 -ax map-ont {params.para} -t {params.threads} {params.reference} {input.merged_fastq} | samtools sort - | samtools view -bh - > {output};rm {input.reference}"
        elif config['tool']=='graphmap':
            rule align:
                input:
                    merged_fastq = expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension")),
                    reference='multi_ref.faa'
                output:
                    expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
                params:
                    reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                    threads = config.get("mapping_threads")
                shell:
                    "graphmap align -x sensitive -r {params.reference} -d {input.merged_fastq} | samtools sort - | samtools view -bh - > {output};rm {input.reference}"


        elif config['tool']=='blasr':
            rule align:
                input:
                    merged_fastq = expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension")),
                    reference='multi_ref.faa'
                output:
                    expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
                params:
                    reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                    threads = config.get("mapping_threads")
                shell:
                     "blasr {input.merged_fastq} {params.reference} -k 5 -w 1 --sam -m 1 --noPrintUnalignedSeqs | samtools sort - | samtools view -bh - > {output};rm {input.reference}"
    else:
        if config['tool']=='minimap':
            rule align:
                input:
                    fastq = config.get("fastq"),
                    reference='multi_ref.faa'
                output:
                    expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
                params:
                    reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                    threads = config.get("mapping_threads"),
                    para=config.get('para')
                shell:
                    "minimap2 -ax map-ont {params.para} -t {params.threads} {input.reference} {input.fastq} | samtools sort - | samtools view -bh - > {output};rm {input.reference}"
        elif config['tool']=='graphmap':
            rule align:
                input:
                    fastq = config.get("fastq"),
                    reference='multi_ref.faa'
                output:
                    expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
                params:
                    reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                    threads = config.get("mapping_threads")
                shell:
                    "graphmap align -x sensitive -r {input.reference} -d {input.fastq} | samtools sort - | samtools view -bh - > {output};rm {input.reference}"
        elif config['tool']=='blasr':
            rule align:
                input:
                    fastq = config.get("fastq"),
                    reference='multi_ref.faa'
                output:
                    expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
                params:
                    reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                    threads = config.get("mapping_threads")
                shell:
                    "blasr {input.fastq} {input.reference} -k 5 -w 1 --sam -m 1 --noPrintUnalignedSeqs | samtools sort - | samtools view -bh - > {output};rm {input.reference}"
                  

# index the bam file
rule index:
    input:
        bam = expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
    output:
        expand("{output_prefix}.bam.bai",output_prefix=config.get("output_prefix"))
    shell:
        "samtools index {input.bam}"

#split the bam file for faster processing
rule split:
    input:
        bam = expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
    output:
        header=expand("{output_prefix}_header.txt",output_prefix=config.get("output_prefix")),
        sam=expand("{output_prefix}.sam",output_prefix=config.get("output_prefix")),
        split=expand("{output_prefix}.split.00",output_prefix=config.get("output_prefix"))
    params:
        threads = config.get("threads"),
        prefix = expand("{output_prefix}.split.",output_prefix=config.get("output_prefix")),
    shell:
        "samtools view -H {input.bam} > {output.header} && samtools view {input.bam} > {output.sam} && split -d -l $(echo `wc -l {output.sam} | cut -f1 -d \" \"` /{params.threads}+1 | bc) {output.sam} {params.prefix}"

rule reheader:
    input:
        header=expand("{output_prefix}_header.txt",output_prefix=config.get("output_prefix")),
        split=expand("{output_prefix}.split.00",output_prefix=config.get("output_prefix"))
    output:
        expand("{output_prefix}.split.00.sam",output_prefix=config.get("output_prefix"))
    params:
        output_prefix = config.get("output_prefix")
    shell:
        "for i in `ls {params.output_prefix}.split*`; do cat {input.header} $i > $i.sam; done && rm {params.output_prefix}*.split.??"

#run periscope
rule periscope:
    input:
        split=expand("{output_prefix}.split.00.sam",output_prefix=config.get("output_prefix")),
        bam = expand("{output_prefix}.bam",output_prefix=config.get("output_prefix")),
        bai = expand("{output_prefix}.bam.bai",output_prefix=config.get("output_prefix"))
    output:
        # expand("{output_prefix}_periscope.bam",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}_periscope_counts.csv",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}_periscope_amplicons.csv",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}_periscope_novel_counts.csv",output_prefix=config.get("output_prefix"))
        # expand("{output_prefix}_periscope.bam.bai",output_prefix=config.get("output_prefix"))
    params:
        search = expand("{scripts_dir}/search_for_sgRNA_{technology}.py",scripts_dir=config.get("scripts_dir"),technology=config.get("technology")),
        output_prefix = config.get("output_prefix"),
        score_cutoff = config.get("score_cutoff"),
        sample = config.get("sample"),
        gff_loc = config.get("gff_file"),
        orf_bed = expand("{resources_dir}/{orf_bed}",resources_dir=config.get("resources_dir"),orf_bed=config.get("orf_bed")),
        primer_bed = expand("{primer_bed}",primer_bed=config.get("primer_bed")),
        amplicon_bed =expand("{amplicon_bed}",amplicon_bed=config.get("amplicon_bed")),
        tmp = config.get("tmp"),
        threads = config.get("threads")

    shell:
        "python {params.search} --bam {input.bam} --gff {params.gff_loc} --score-cutoff {params.score_cutoff} --output-prefix {params.output_prefix} --score-cutoff {params.score_cutoff} --sample {params.sample} --orf-bed {params.orf_bed} --primer-bed {params.primer_bed} --amplicon-bed {params.amplicon_bed} --tmp {params.tmp} --threads {params.threads}"


