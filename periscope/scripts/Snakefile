threads = config.get("mapping_threads")
split_suffix = [f"{i:02}" for i in range(int(threads))]

rule all:
    input:
        # # merged fastq file
        # expand("{output_prefix}.fastq",output_prefix=config.get("output_prefix")),
        # all bam file
        expand("{output_prefix}.bam",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}.bam.bai",output_prefix=config.get("output_prefix")),
        # counts of read types
        expand("{output_prefix}_periscope_counts.csv",output_prefix=config.get("output_prefix")),
        expand("{output_prefix}_periscope_novel_counts.csv",output_prefix=config.get("output_prefix")),
        # amplicon list
        expand("{output_prefix}_periscope_amplicons.csv",output_prefix=config.get("output_prefix")),
        # tagged bam
        # expand("{output_prefix}_periscope.bam",output_prefix=config.get("output_prefix")),
        # expand("{output_prefix}_periscope.bam.bai",output_prefix=config.get("output_prefix"))

        expand("{output_prefix}_header.txt",output_prefix=config.get("output_prefix")),
        # expand("{output_prefix}.split.{split_suffix}.sam",output_prefix=config.get("output_prefix"),split_suffix=split_suffix),

if config["technology"] == "illumina":

    rule align:
        input:
            fastq = config.get("fastq")
        output:
           expand("{output_prefix}.bam",output_prefix=config.get("output_prefix"))
        params:
            reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
            threads = config.get("mapping_threads")
        shell:
            "bwa mem -Y -t {params.threads} {params.reference} {input.fastq} | samtools sort - | samtools view -bh - > {output}"

elif config["technology"] == "ont":

    if config.get('fastq_dir'):
        if config.get('gzipped') == True:
            # collect fastqs
            rule collect_fastqs:
                output:
                    expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension"))
                params:
                    fastq_dir = config.get("fastq_dir"),
                    extension = config.get("extension")
                shell:
                    "zcat {params.fastq_dir}/*.{params.extension} > {output}"
        else:
            # collect fastqs
            rule collect_fastqs:
                output:
                    expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension"))
                params:
                    fastq_dir = config.get("fastq_dir"),
                    extension = config.get("extension")
                shell:
                    "cat {params.fastq_dir}/*.{params.extension} > {output}"


        # map fastqs
        rule align:
            input:
                merged_fastq = expand("{output_prefix}.{extension}",output_prefix=config.get("output_prefix"),extension=config.get("extension"))
            output:
               "{output_prefix}.bam",output_prefix=config.get("output_prefix")
            params:
                reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                threads = config.get("mapping_threads")
            shell:
                "minimap2 -ax map-ont -k 15 -t {params.threads} {params.reference} {input.merged_fastq} | samtools sort - | samtools view -bh - > {output}"

    else:
        rule align:
            input:
                fastq = config.get("fastq")
            output:
               "{output_prefix}.bam"
            params:
                reference = expand("{resources_dir}/{reference_fasta}",resources_dir=config.get("resources_dir"),reference_fasta=config.get("reference_fasta")),
                threads = config.get("mapping_threads")
            shell:
                "minimap2 -ax map-ont -k 15 -t {params.threads} {params.reference} {input.fastq} | samtools sort - | samtools view -bh - > {output}"

# index the bam file
rule index:
    input:
        bam = "{output_prefix}.bam"
    output:
        "{output_prefix}.bam.bai"
    shell:
        "samtools index {input.bam}"

#split the bam file for faster processing
rule split_get_header:
    input:
        bam = "{output_prefix}.bam"
    output:
        header = temp("{output_prefix}_header.txt"),
    shell:
        "samtools view -H {input.bam} > {output.header}" # -H = header only

rule bam_to_sam:
    input:
        bam = "{output_prefix}.bam"
    output:
        sam=temp("{output_prefix}.sam")
    shell:
        "samtools view {input.bam} > {output.sam}" # equivalent to --no-header

rule split_sams:
    input:
        sam="{output_prefix}.sam",
    params:
        threads = config.get("threads"),
        split_output = "{output_prefix}.split.{split_suffix}",
        prefix = expand("{output_prefix}.split.",output_prefix=config.get("output_prefix")),
    output:
        split=temp("{output_prefix}.split.{split_suffix}.txt")
    
    shell:
        "split --numeric-suffixes=0 --additional-suffix=.txt --lines $(echo `wc -l {input.sam} | cut -f1 -d \" \"` /{params.threads}+1 | bc) {input.sam} {params.prefix}"

rule reheader:
    input:
        header="{output_prefix}_header.txt",
        split="{output_prefix}.split.{split_suffix}.txt"
    output:
        split_sam=temp("{output_prefix}.split.{split_suffix}.sam")
    params:
        output_prefix = config.get("output_prefix")
    shell:
        "cat {input.header} {input.split} > {output.split_sam}"

#run periscope
rule periscope:
    input:
        split_sam = expand("{output_prefix}.split.{split_suffix}.sam",output_prefix=config.get("output_prefix"),split_suffix=split_suffix),        
        bam = "{output_prefix}.bam",
        bai = "{output_prefix}.bam.bai"
    output:
        # expand("{output_prefix}_periscope.bam",output_prefix=config.get("output_prefix")),
        "{output_prefix}_periscope_counts.csv",
        "{output_prefix}_periscope_amplicons.csv",
        "{output_prefix}_periscope_novel_counts.csv",
        # expand("{output_prefix}_periscope.bam.bai",output_prefix=config.get("output_prefix"))
    params:
        search = expand("{scripts_dir}/search_for_sgRNA_{technology}.py",scripts_dir=config.get("scripts_dir"),technology=config.get("technology")),
        output_prefix = config.get("output_prefix"),
        score_cutoff = config.get("score_cutoff"),
        sample = config.get("sample"),
        orf_bed = expand("{resources_dir}/{orf_bed}",resources_dir=config.get("resources_dir"),orf_bed=config.get("orf_bed")),
        primer_bed = expand("{primer_bed}",primer_bed=config.get("primer_bed")),
        amplicon_bed =expand("{amplicon_bed}",amplicon_bed=config.get("amplicon_bed")),
        tmp = config.get("tmp"),
        threads = config.get("threads")

    shell:
        "python {params.search} --bam {input.bam} --score-cutoff {params.score_cutoff} --output-prefix {params.output_prefix} --score-cutoff {params.score_cutoff} --sample {params.sample} --orf-bed {params.orf_bed} --primer-bed {params.primer_bed} --amplicon-bed {params.amplicon_bed} --tmp {params.tmp} --threads {params.threads}"


